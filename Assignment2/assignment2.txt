//ques 1

int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n= nums.size(), ans=0;
        for(int i=0; i<n; i+=2){
            ans+= nums[i];
        }
        return ans;
    }


//ques 2

int distributeCandies(vector<int>& candyType) {
        int n = candyType.size();
        unordered_set<int> s(candyType.begin(), candyType.end());
        if(s.size() >= n/2){
            return n/2;
        }
        return s.size();
    }

//ques 3

int findLHS(vector<int>& nums) {
        map<int,int> freq;
        for(auto a:nums) ++freq[a];
        int ans=0;
        for(auto a:freq)
            if(freq.count(a.first+1))   ans = max(ans, a.second+freq[a.first+1]);
            
        return ans;
    }

//ques 4

bool canPlaceFlowers(vector<int>& v, int n) {
        if(n==0)return true;
        if(v.size()==1){
            if((v[0]==0&&n==1)||n==0)return true;
            return false;
        }if(v.size()==2){
            if(n==0||(n==1&&(v[0]==0&&v[1]==0))){
                return true;
            }return false;
        }
        if(v[0]==0&&v[1]==0){
            v[0]=1;
            n--;
        }if(n==0)return true;
        for(int i = 1; i < v.size()-1; i++){
            if(v[i-1]==1)continue;
            if(v[i]==0&&v[i+1]==0){
                v[i] = 1;
                n--;
            }
                if(n==0)return true;
        }
                if(n==0)return true;
        if(n==1){
            if(v[v.size()-2]==0&&v[v.size()-1]==0){
                return true;
            }
            return false;
        }
        return false;
    }

//ques 5

int maximumProduct(vector<int>& nums) {
        int n= nums.size();
        sort(nums.begin(),nums.end());
        int ans1= nums[n-1]*nums[n-2]*nums[n-3];
        int ans2= nums[0]*nums[1]*nums[n-1];
        return max(ans1,ans2);
    }

//ques 6

int search(vector<int>& nums, int target) {
        int n = nums.size()-1;
        int s = 0;
        int e = n;
        int mid = s + (e-s)/2;
        while( s <= e){
            if (nums[mid] == target) {
                return mid;
            }
            else if (nums[mid] > target){
                 e = mid -1;
            }
            else {
                s = mid + 1;
            }
            mid = s + (e-s)/2;
        }
        return -1;
    }

//ques 7

bool isMonotonic(vector<int>& nums) 
    {
      int n=nums.size();
      if(n==0){return true;}
      int i;
        for(i =0;i<n-1;i++)
            {
                if(nums[i]>=nums[i+1])
                continue;
                else
                break; 
            }
            if(i==n-1)return true;
             for(i =0;i<n-1;i++)
            {
                if(nums[i]<=nums[i+1])
                continue;
                else
                break;
            }     if(i==n-1)return true;       
    return false;
    }

//ques 8

int smallestRangeI(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        int diff;
        
        if(nums[nums.size()-1]-k>=nums[0]+k){
            diff=(nums[nums.size()-1]-k)-(nums[0]+k);
        }
        else{
            int fl=nums[nums.size()-1]-nums[0]+k;
            diff=nums[nums.size()-1]-fl-nums[0]+k;
        }
        return diff;
    }