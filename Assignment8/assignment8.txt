// ques 1

int solveTab(string &s1,string &s2){
      int n=s1.length();
      int m=s2.length();
      vector<vector<int>>dp(n+1,vector<int>(m+1,0));
      for(int i=n-1;i>=0;i--){
          for(int j=m-1;j>=0;j--){
              int ans=0;
              if(s1[i]==s2[j]){
                  ans=s1[i]+dp[i+1][j+1];
              }else{
                  ans=max(dp[i+1][j],dp[i][j+1]);
              }
              dp[i][j]=ans;
          }
      }
      return dp[0][0];
    }
	int minimumDeleteSum(string s1, string s2) {
        int n=s1.length();
        int m=s2.length();
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=s1[i];
        }
        for(int i=0;i<m;i++){
            sum+=s2[i];
        }
        return sum-(2*(solveTab(s1,s2)));
    }


// ques 2

bool checkValidString(string s) {
        vector<vector<int>> dp(s.size()+1, vector<int>(s.size()+1,0));
        dp[s.size()][0]=1;

        for(int ind=s.size()-1; ind>=0; ind--){
            for(int openingBracket=0; openingBracket<s.size(); openingBracket++){
                bool ans=false;
                if(s[ind]=='*'){
                    ans|=dp[ind+1][openingBracket+1];
                    if(openingBracket) ans|=dp[ind+1][openingBracket-1];
                    ans|=dp[ind+1][openingBracket];
                }else{
                    if(s[ind]=='('){
                        ans|=dp[ind+1][openingBracket+1];
                    }else{
                        if(openingBracket) ans|=dp[ind+1][openingBracket-1];
                    }
                }

                dp[ind][openingBracket]=ans;
            }
        }

        return dp[0][0];
    }

//ques 3

int minDistance(string word1, string word2) {
        int m=word1.size(), n=word2.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for(int i=1; i<=m; i++) {
            for(int j=1; j<=n; j++) {
                if(word1[i-1] == word2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return m+n-2*dp[m][n];
    }


//ques 4

TreeNode* str2tree(string s) {
        return dfs(s);
    }

    TreeNode* dfs(string s) {
        if (s == "") return nullptr;
        int p = s.find("(");
        if (p == s.npos) return new TreeNode(stoi(s));
        TreeNode* root = new TreeNode(stoi(s.substr(0, p)));
        int start = p;
        int cnt = 0;
        for (int i = p; i < s.size(); ++i) {
            if (s[i] == '(')
                ++cnt;
            else if (s[i] == ')')
                --cnt;
            if (cnt == 0) {
                if (start == p) {
                    root->left = dfs(s.substr(start + 1, i - start - 1));
                    start = i + 1;
                } else
                    root->right = dfs(s.substr(start + 1, i - start - 1));
            }
        }
        return root;
    }


//ques 5

 int compress(vector<char>& a) {
        
        int length = a.size();
        
        if(length == 1)
            return 1;
        
        int result = 0;
        int count = 1; 
        
            for(int i=0;i<length-1;i++){
                
                if(a[i] == a[i+1])
                    count++;
                else{
                    
                    a[result++] = a[i];
                    
                    if(count > 1){
                        
                        string str = to_string(count);
                        
                        for(int j=0;j<str.length();j++)
                            a[result++] = str[j];     
                    }         
                         
                    count = 1;
                }    
            }
            
            a[result++] = a[length-1];
            if(count > 1){
                string str = to_string(count);
                for(int j=0;j<str.length();j++)
                    a[result++] = str[j];     
            }   
        
            return result;
    }

//ques 6

vector<int> findAnagrams(string s, string p) {
        int i=0,j=0;
        vector<int>a(26,0),b(26,0);
        for(auto &i:p){
            a[i-'a']++;
        }
        vector<int>ans;
        while(j<s.length()){
            b[s[j]-'a']++;
            if(j-i+1==p.length()){
                if(b==a){
                  ans.push_back(i);
                }
                b[s[i]-'a']--;
                i++,j++;
            }
            else j++;
        }
        return ans;
    }

//ques 7

 string decodeString(string str) {
      
      stack<string>st;
      string currstring="",currnum="";

      for(auto i:str)
      {
        if(i=='[')
        {
          st.push(currstring);
          st.push(currnum);

          currstring="";
          currnum="";
        }
        else if(i==']')
        {
           int num=stoi(st.top());
           st.pop();
           string prevstring =st.top();
           st.pop();

           string temp=prevstring;
           for(int i=0;i<num;i++)
           {
             temp+=currstring;
           }
           currstring=temp;
        }
        else if(isdigit(i))
        {
          currnum+=i;
        }
        else
        {
          currstring+=i;
        }
      }
      return currstring;
    }


//ques 8

bool buddyStrings(string s, string goal) {
        if (s.length() != goal.length() || s.length() <= 1) {
            return false;
        }

        if (s == goal) {
            unordered_set<char> distinctChars(s.begin(), s.end());
            return distinctChars.size() < s.length();
        }

        vector<int> index;
        for (int i=0;i<s.length();i++) {
            if (s[i] != goal[i]) {
                index.push_back(i);
            }
        }

        if (index.size() != 2) {
            return false;
        }

        swap(s[index[0]], s[index[1]]);
        return s == goal;
    }